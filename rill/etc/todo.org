
** New branch ensemble v2.0

*** DONE Create new score template 
+ update materials/instruments/definition.py
+ update tools/ScoreTemplate.py
+ test new Template by running ScoreTemplate.py locally

*** DONE Import new segment maker from marana
+ replace rill/tools/SegmentMaker.py with marana/tools/SegmentMaker.py
+ compare differences, update functions:
  - _get_music_voices(self)
  - _get_staves(self)
  - _handle_time_signatures(self)
  - _sort_instruments_by_clef(self)
  - run(self)

*** DONE generate new structure for segments
+ recursively delete all existing subdirectories and files in segments 
+ import generator scripts from marana
+ run `generateSegments.sh` on the empty segments directory
+ rewrite DefGen.py to reflect structure of new score template 
+ update makefile in builds to reflect new segments
+ delete all pdfs from builds/letter-portrait
+ update segments.ily file

*** DONE Test build all segments and run make on the score


*** TODO Design generator script for creating definition.py files
+ 28-30. Oct 20: created new Dev branch and began working on
  defGen_v1.py
+ define new classes that generate a "music code block" as output (use
  factory method design pattern)
+ move mMakerGenerator into the MusicMaker module, so it can be
  imported into the `segment_$X/definition.py`
+ test that output is building a coherant score

*** TODO Re-configure ScoreTemplate to reflect final instrumentation
*** TODO Find solution for missing instrument name markups


*** TODO Merge Dev branch into Ensemble

*** TODO Find way to tag score with build time and git branch


** Initial Setup of v1.0 

*** 8-7-20

 + DONE Write test for `material_methods.py`
 + DONE Create push/pop methods for PhraseStream containers list
  - DONE okay, better way, refactor the code in  PhraseMaker module
  - DONE this all worked fine, Phrases are making it to Instrument Voices in
    Score
  - DONE there is a problem to solve with `segment_maker._configure_score()`
 + DONE Clean up segments B-G 

 + Test a build with travis
  - Read testing with pytest and figure out how to use it properly;-)!

 + rework material in segments, each segment is 64 bars long
  - we could make all the harmonies (one harmony and inversions) for each
    segment and store these in a dictionary with a reference 
  - the `make_diads` routine is resulting in some pretty jumpy intervals, try
    reducing the complexity of this a bit and see if in doing so, it's possible
    to produce smoother lines. 
  - one arpeggio pattern per harmony (three in total) 

 + Write violin part 
 
 + Write methods for attachments (markup + dynamics)

*** 16-6-20
 
 + DONE Research a way to use RhythmDefinition.py effectively
  - DONE refine the routine used to produce an rmaker
  - DONE define a pitches property in FuzzyHarmony
  - DONE this can be used in making rmakers
  - DONE check viability with Trevor's RhythmDefinition

 + DONE Fix linkage to stylesheets 
  - DONE run same segment A test and fix errors on build

*** 15-6-20

 + DONE Clean up tested code
 + DONE Make a working segment
  - DONE first build a score example using existing code
  - DONE figure out how to handle overlapping rmakers

*** 28-5-20

 + DONE Read abjad.Chord to see if method exists to create invertion
 + DONE Create method to invert guitar chords stored in abjad.OrdinaryDict
 + DONE Iteratively invert all chords
  - DONE Why would you want to build a static resource that holds all
    DONE possible inversions?
  - DONE Inversions are more commonly found in sequences
  - DONE Therefor it makes more sense to write a simple dictionary of used
    chords
    DONE and import a routine for inversion
 + DONE Make quick notational sketch of possible guitar figures
  - DONE pre-requisites: 
   + DONE these should be as general as possible, so they can be ported to other
     DONE instruments incase the instrumentation changes by the autumn and so that  
     DONE they can be used for the harp parts in the orchestral piece later in the
     DONE summer 

#+BEGIN_SRC 

Data Structure: 
 |_ Chord
   |_sub-grouping
     |_max-voices is restricted by instrument 
     |_tetrad voicing 
     |_triad voicing
     |_min voices = diad voicing
   |_figuration style
     |_arpeggio
       |_up
       |_up-down
       |_down-up
       |_down
       |_random
     |_chordal

#+END_SRC

 + DONE Clarification of what we want to do with these chords:
  - DONE Write a routine that outputs all possible harmonic progressions:
   + [[ii - v - i], [iib - v - i], [iib, v, ia], [ii - v -i]]
  - DONE Once these harmonic progressions are formed, it's possible 
    DONE to express the harmonic material as chords or pitch segments
    DONE and to use these in collaboration with rmakers to create actual
    "phrases"


* DONE Figure out if there is some way to make a selection based on a PitchSegment  
  - DONE review abjad music maker def by Trevor (abjad users::re:rmakers)
  - DONE build verbatim example to see how iterators are making leaves
 + DONE Make do-ability survey (impossible, hard, easy) 
 + DONE Send notes + survey to guitarists


# 20-5-2020 Next Steps 
+ DONE re-read Oberholzer diss chpt. 3
+ DONE design a few tests to get familiar with timespans & rmakers
+ DONE re-read Oberholzer diss chpt. 3
+ DONE design a few tests to get familiar with timespans & rmakers
+ DONE Customize SegmentMaker definition

DONE Reading: creating a musik-maker class
https://groups.google.com/forum/?utm_source=digest&utm_medium=email#!searchin/abjad-user/rmakers%7Csort:date/abjad-user/zJOTepHWGlE/pdumspKSAAAJ
