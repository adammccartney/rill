
** New branch ensemble v2.0

*** DONE Create new score template
+ update materials/instruments/definition.py
+ update tools/ScoreTemplate.py
+ test new Template by running ScoreTemplate.py locally

*** DONE Import new segment maker from marana
+ replace rill/tools/SegmentMaker.py with marana/tools/SegmentMaker.py
+ compare differences, update functions:
  - _get_music_voices(self)
  - _get_staves(self)
  - _handle_time_signatures(self)
  - _sort_instruments_by_clef(self)
  - run(self)

*** DONE generate new structure for segments
+ recursively delete all existing subdirectories and files in segments
+ import generator scripts from marana
+ run `generateSegments.sh` on the empty segments directory
+ rewrite DefGen.py to reflect structure of new score template
+ update makefile in builds to reflect new segments
+ delete all pdfs from builds/letter-portrait
+ update segments.ily file

*** DONE Test build all segments and run make on the score


*** DONE Design generator script for creating definition.py files
:LOGBOOK:
- State "DONE"       from "IN-PROGRESS" [2020-11-11 Wed 12:16]
:END:
+ 28-30. Oct 20: created new Dev branch and began working on
  defGen_v1.py
+ define new classes that generate a "music code block" as output (use
  factory method design pattern)
+ move mMakerGenerator into the MusicMaker module, so it can be
  imported into the `segment_$X/definition.py`
+ test that output is building a coherant score
 +  redefine basic structure to reflect that it is possible to import music data initializer objects from database in a systematic way
*** CANCELED Define workflow for "auditioning" and persisting music data init objects to db
:LOGBOOK:
- State "CANCELED"   from "IN-PROGRESS" [2020-11-03 Tue 20:43]
:END:
 +  currently, in order to see how a set of music data objects we're calling up a Segment
 + initial solution to persist music data objects on a per segment basis to some sort of a db failed -> there was an issue with using mutable objects in a shelve db. I'm sure there is a way to set this up to work, possibly by using an OOdb. However, I'm going to try and keep things simple for now, see next todo for details
*** DONE Simplify data storage for segment music data
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-11-04 Wed 14:08]
:END:
 + created two new classes SegmentPitchData and SegmentTaleaData
 + their members are simple (strings and lists of ints, respectively)
 + they can be pickled and stored in a shelve database, recalled on a per segment basis
 + this will let us script (at least some of) the variable assignment that needs to happen for each segment
*** DONE write generator script for "music data" files on a per segment basis
:LOGBOOK:
- State "DONE"       from "IN-PROGRESS" [2020-11-11 Wed 12:16]
:END:
 + I'm going to exploit some of python's handy namespace rules and create a one module per segment to store the music initializer data
 + basically, there are two objects essential for this operation: "InstrumentMusicData" and "SegmentMusicData"
 + this means we can call the instance of "SegmentMusicData" that is in the segment scope in a way that supports scripting the definition files (basically the reason for this is to avoid hand-hacking the "definition.py" file
 + ...but there will ultimately be a little hand hacking... basically, I'm going to initialize the pair of objects mentioned above with their default values and then override on a per segment basis
*** DONE Define materials on a per segment basis and include references in the "music data" scripts :reading:
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-11-11 Wed 12:16]
:END:
 +  this amounts to a formal description of the composition itself
*** DONE Define generator for percussive counts                    :active:
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-11-09 Mon 10:55]
:END:
 +  function accepts an integer val as argument and returns a "boolean" (1, -1) list
*** DONE Define persistent data structure for material in segments
:LOGBOOK:
- State "DONE"       from "IN-PROGRESS" [2020-11-02 Mon 15:27]
:END:
 + worked through a couple of iterations that tried to use a NamedTuple to manage the data used to initialize the music functions as they are passed into the SegmentMaker member functions before being typeset as notation. Problem is that it is seemingly not so easy to use user defined and complex types in a namedtuple

 + use of python's DataClass seems to facilitate working with (more) complex datatypes and custom classes

   - I'm trying to get around having to hand-hack the initialization of the MusicMaker objects: so I want to be able to generate the "definition.py" scripts on a per segment basis, and not have to tweak the output. So ideally, each "definition.py" would refer to an "init segment music" data class on a per instrument basis in each segment. This means that we could write a generator script for all instances of "definition.py" within the subdirectories of segments
[[./segment_DataFlow.png]]
*** DONE Write a member function in the MusicMaker class that tidies according to meter
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-11-03 Tue 11:27]
:END:
"clean up rhythm" member function is now taking music as input and re-grouping the rhythms according to the time signatures as passed in by the "time signature pairs" variable

*** DONE Define a way to persist objects that will be later used to construct MusicMaker objects
 + Going to do a couple of experiments with python's shelve object

 + Test that you can access via Path

*** DONE Define an OverrideMaker class to handle the different styles of notehead
:LOGBOOK:
- State "DONE"       from "IN-PROGRESS" [2020-11-05 Thu 19:57]
:END:
 + define & unit test class
 + integration with MusicMaker and test
*** DONE Re-configure ScoreTemplate to reflect final instrumentation
:LOGBOOK:
- State "DONE"       from "IN-PROGRESS" [2020-11-05 Thu 21:25]
:END:
 + Okay, after plenty of dickin' around with getting the stylesheets to manage instrument names, I finally found a way to get them to display:
   - There is a sort of Staff override in lilypond, whereby the a new context staff can be specified with a name like "FluteOneStaff" and refer to another type of staff in the stylesheet block. These can be wrapped in custom StaffGroup staffs in order to make their management a little bit easier

   - they then have to be referenced in the MusicStaff context block
*** DONE Find solution for missing instrument name markups
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-11-09 Mon 09:43]
:END:
 +  looks like the better solution is to implement the names by hand via the stylesheet.ily
 + This involved defining custom names for the "lilypond type" variables that were present in the ScoreTemplate file. These names are then referenced in the stylesheet, where the actual instrument names are also defined
*** TODO Run build process to generate music data for each segment, followed by definitions:
*** TODO Merge Dev branch into Ensemble

*** TODO Find way to tag score with build time and git branch


** Initial Setup of v1.0

*** 8-7-20

 + DONE Write test for `material_methods.py`
 + DONE Create push/pop methods for PhraseStream containers list
  - DONE okay, better way, refactor the code in  PhraseMaker module
  - DONE this all worked fine, Phrases are making it to Instrument Voices in
    Score
  - DONE there is a problem to solve with `segment_maker._configure_score()`
 + DONE Clean up segments B-G

 + Test a build with travis
  - Read testing with pytest and figure out how to use it properly;-)!

 + rework material in segments, each segment is 64 bars long
  - we could make all the harmonies (one harmony and inversions) for each
    segment and store these in a dictionary with a reference
  - the `make_diads` routine is resulting in some pretty jumpy intervals, try
    reducing the complexity of this a bit and see if in doing so, it's possible
    to produce smoother lines.
  - one arpeggio pattern per harmony (three in total)

 + Write violin part

 + Write methods for attachments (markup + dynamics)

*** 16-6-20

 + DONE Research a way to use RhythmDefinition.py effectively
  - DONE refine the routine used to produce an rmaker
  - DONE define a pitches property in FuzzyHarmony
  - DONE this can be used in making rmakers
  - DONE check viability with Trevor's RhythmDefinition

 + DONE Fix linkage to stylesheets
  - DONE run same segment A test and fix errors on build

*** 15-6-20

 + DONE Clean up tested code
 + DONE Make a working segment
  - DONE first build a score example using existing code
  - DONE figure out how to handle overlapping rmakers

*** 28-5-20

 + DONE Read abjad.Chord to see if method exists to create invertion
 + DONE Create method to invert guitar chords stored in abjad.OrdinaryDict
 + DONE Iteratively invert all chords
  - DONE Why would you want to build a static resource that holds all
    DONE possible inversions?
  - DONE Inversions are more commonly found in sequences
  - DONE Therefor it makes more sense to write a simple dictionary of used
    chords
    DONE and import a routine for inversion
 + DONE Make quick notational sketch of possible guitar figures
  - DONE pre-requisites:
   + DONE these should be as general as possible, so they can be ported to other
     DONE instruments incase the instrumentation changes by the autumn and so that
     DONE they can be used for the harp parts in the orchestral piece later in the
     DONE summer

#+BEGIN_SRC

Data Structure:
 |_ Chord
   |_sub-grouping
     |_max-voices is restricted by instrument
     |_tetrad voicing
     |_triad voicing
     |_min voices = diad voicing
   |_figuration style
     |_arpeggio
       |_up
       |_up-down
       |_down-up
       |_down
       |_random
     |_chordal

#+END_SRC

 + DONE Clarification of what we want to do with these chords:
  - DONE Write a routine that outputs all possible harmonic progressions:
   + [[ii - v - i], [iib - v - i], [iib, v, ia], [ii - v -i]]
  - DONE Once these harmonic progressions are formed, it's possible
    DONE to express the harmonic material as chords or pitch segments
    DONE and to use these in collaboration with rmakers to create actual
    "phrases"


* DONE Figure out if there is some way to make a selection based on a PitchSegment
  - DONE review abjad music maker def by Trevor (abjad users::re:rmakers)
  - DONE build verbatim example to see how iterators are making leaves
 + DONE Make do-ability survey (impossible, hard, easy)
 + DONE Send notes + survey to guitarists


# 20-5-2020 Next Steps
+ DONE re-read Oberholzer diss chpt. 3
+ DONE design a few tests to get familiar with timespans & rmakers
+ DONE re-read Oberholzer diss chpt. 3
+ DONE design a few tests to get familiar with timespans & rmakers
+ DONE Customize SegmentMaker definition

DONE Reading: creating a musik-maker class
https://groups.google.com/forum/?utm_source=digest&utm_medium=email#!searchin/abjad-user/rmakers%7Csort:date/abjad-user/zJOTepHWGlE/pdumspKSAAAJ
